// Generated by gencpp from file imu/IMU_Data.msg
// DO NOT EDIT!


#ifndef IMU_MESSAGE_IMU_DATA_H
#define IMU_MESSAGE_IMU_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace imu
{
template <class ContainerAllocator>
struct IMU_Data_
{
  typedef IMU_Data_<ContainerAllocator> Type;

  IMU_Data_()
    : accel()
    , mag()
    , angrate()
    , quat()
    , time(0.0)  {
      accel.assign(0.0);

      mag.assign(0.0);

      angrate.assign(0.0);

      quat.assign(0.0);
  }
  IMU_Data_(const ContainerAllocator& _alloc)
    : accel()
    , mag()
    , angrate()
    , quat()
    , time(0.0)  {
  (void)_alloc;
      accel.assign(0.0);

      mag.assign(0.0);

      angrate.assign(0.0);

      quat.assign(0.0);
  }



   typedef boost::array<float, 3>  _accel_type;
  _accel_type accel;

   typedef boost::array<float, 3>  _mag_type;
  _mag_type mag;

   typedef boost::array<float, 3>  _angrate_type;
  _angrate_type angrate;

   typedef boost::array<float, 4>  _quat_type;
  _quat_type quat;

   typedef double _time_type;
  _time_type time;




  typedef boost::shared_ptr< ::imu::IMU_Data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::imu::IMU_Data_<ContainerAllocator> const> ConstPtr;

}; // struct IMU_Data_

typedef ::imu::IMU_Data_<std::allocator<void> > IMU_Data;

typedef boost::shared_ptr< ::imu::IMU_Data > IMU_DataPtr;
typedef boost::shared_ptr< ::imu::IMU_Data const> IMU_DataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::imu::IMU_Data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::imu::IMU_Data_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace imu

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'imu': ['/home/odroid/catkin_ws/src/imu/msg', '/home/odroid/catkin_ws/src/imu/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::imu::IMU_Data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::imu::IMU_Data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imu::IMU_Data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imu::IMU_Data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imu::IMU_Data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imu::IMU_Data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::imu::IMU_Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7d45cb493d33cb1dd3f277b4b672e446";
  }

  static const char* value(const ::imu::IMU_Data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7d45cb493d33cb1dULL;
  static const uint64_t static_value2 = 0xd3f277b4b672e446ULL;
};

template<class ContainerAllocator>
struct DataType< ::imu::IMU_Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "imu/IMU_Data";
  }

  static const char* value(const ::imu::IMU_Data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::imu::IMU_Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[3] accel\n\
float32[3] mag\n\
float32[3] angrate\n\
float32[4] quat\n\
float64 time\n\
";
  }

  static const char* value(const ::imu::IMU_Data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::imu::IMU_Data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.accel);
      stream.next(m.mag);
      stream.next(m.angrate);
      stream.next(m.quat);
      stream.next(m.time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IMU_Data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::imu::IMU_Data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::imu::IMU_Data_<ContainerAllocator>& v)
  {
    s << indent << "accel[]" << std::endl;
    for (size_t i = 0; i < v.accel.size(); ++i)
    {
      s << indent << "  accel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.accel[i]);
    }
    s << indent << "mag[]" << std::endl;
    for (size_t i = 0; i < v.mag.size(); ++i)
    {
      s << indent << "  mag[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.mag[i]);
    }
    s << indent << "angrate[]" << std::endl;
    for (size_t i = 0; i < v.angrate.size(); ++i)
    {
      s << indent << "  angrate[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.angrate[i]);
    }
    s << indent << "quat[]" << std::endl;
    for (size_t i = 0; i < v.quat.size(); ++i)
    {
      s << indent << "  quat[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.quat[i]);
    }
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMU_MESSAGE_IMU_DATA_H
