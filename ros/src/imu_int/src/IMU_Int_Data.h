// Generated by gencpp from file imu_int/IMU_Int_Data.msg
// DO NOT EDIT!


#ifndef IMU_INT_MESSAGE_IMU_INT_DATA_H
#define IMU_INT_MESSAGE_IMU_INT_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace imu_int
{
template <class ContainerAllocator>
struct IMU_Int_Data_
{
  typedef IMU_Int_Data_<ContainerAllocator> Type;

  IMU_Int_Data_()
    : accel()
    , vel()
    , pos()
    , time(0.0)  {
      accel.assign(0.0);

      vel.assign(0.0);

      pos.assign(0.0);
  }
  IMU_Int_Data_(const ContainerAllocator& _alloc)
    : accel()
    , vel()
    , pos()
    , time(0.0)  {
  (void)_alloc;
      accel.assign(0.0);

      vel.assign(0.0);

      pos.assign(0.0);
  }



   typedef boost::array<float, 3>  _accel_type;
  _accel_type accel;

   typedef boost::array<float, 3>  _vel_type;
  _vel_type vel;

   typedef boost::array<float, 3>  _pos_type;
  _pos_type pos;

   typedef double _time_type;
  _time_type time;




  typedef boost::shared_ptr< ::imu_int::IMU_Int_Data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::imu_int::IMU_Int_Data_<ContainerAllocator> const> ConstPtr;

}; // struct IMU_Int_Data_

typedef ::imu_int::IMU_Int_Data_<std::allocator<void> > IMU_Int_Data;

typedef boost::shared_ptr< ::imu_int::IMU_Int_Data > IMU_Int_DataPtr;
typedef boost::shared_ptr< ::imu_int::IMU_Int_Data const> IMU_Int_DataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::imu_int::IMU_Int_Data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::imu_int::IMU_Int_Data_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace imu_int

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'imu_int': ['/home/auvic/catkin_ws/src/imu_int/msg', '/home/auvic/catkin_ws/src/imu_int/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::imu_int::IMU_Int_Data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::imu_int::IMU_Int_Data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imu_int::IMU_Int_Data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imu_int::IMU_Int_Data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imu_int::IMU_Int_Data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imu_int::IMU_Int_Data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::imu_int::IMU_Int_Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "51fbdd856b1d94d23fd0fbf2637d5c37";
  }

  static const char* value(const ::imu_int::IMU_Int_Data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x51fbdd856b1d94d2ULL;
  static const uint64_t static_value2 = 0x3fd0fbf2637d5c37ULL;
};

template<class ContainerAllocator>
struct DataType< ::imu_int::IMU_Int_Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "imu_int/IMU_Int_Data";
  }

  static const char* value(const ::imu_int::IMU_Int_Data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::imu_int::IMU_Int_Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[3] accel\n\
float32[3] vel\n\
float32[3] pos\n\
float64 time\n\
";
  }

  static const char* value(const ::imu_int::IMU_Int_Data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::imu_int::IMU_Int_Data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.accel);
      stream.next(m.vel);
      stream.next(m.pos);
      stream.next(m.time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IMU_Int_Data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::imu_int::IMU_Int_Data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::imu_int::IMU_Int_Data_<ContainerAllocator>& v)
  {
    s << indent << "accel[]" << std::endl;
    for (size_t i = 0; i < v.accel.size(); ++i)
    {
      s << indent << "  accel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.accel[i]);
    }
    s << indent << "vel[]" << std::endl;
    for (size_t i = 0; i < v.vel.size(); ++i)
    {
      s << indent << "  vel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.vel[i]);
    }
    s << indent << "pos[]" << std::endl;
    for (size_t i = 0; i < v.pos.size(); ++i)
    {
      s << indent << "  pos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pos[i]);
    }
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMU_INT_MESSAGE_IMU_INT_DATA_H
